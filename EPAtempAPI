import requests
import pandas as pd
import time

# Your EPA API key and email
api_key = 'enteryourkey'
email = 'enteryouremail'

# API endpoint for daily summary of temperature data by state
url = 'https://aqs.epa.gov/data/api/dailyData/byState'

# List of all state codes (adjust as needed)
states = ['01', '02', '04', '05', '06', '08', '09', '10', '12', '13', '15', '16', '17', '18', '19', '20', 
          '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', 
          '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '53', 
          '54', '55', '56']

# Try to resume from previous data
try:
    all_temp_data
except NameError:
    all_temp_data = pd.DataFrame()  # Initialize if not defined

# List to store failed requests for retry later
failed_requests = []

# Resume from a specific year and state if necessary
start_year = 2009
start_state_index = 18  # Index of state 19

for year in range(start_year, 2025):
    bdate = f'{year}0101'
    edate = f'{year}1231'
    
    for state in states[start_state_index:]:
        params = {
            'email': email,
            'key': api_key,
            'param': '62101',
            'bdate': bdate,
            'edate': edate,
            'state': state
        }

        try:
            response = requests.get(url, params=params)
            response.raise_for_status()  # Ensure that no HTTP errors occurred
            data = response.json()

            if 'Data' in data:
                temp_data = pd.DataFrame(data['Data'])
                all_temp_data = pd.concat([all_temp_data, temp_data], ignore_index=True)
                print(f"Successfully retrieved data for state {state} in year {year}")
            else:
                print(f"No data for state {state} in year {year}")

        except requests.exceptions.RequestException as e:
            print(f"Error fetching data for state {state} in year {year}: {e}")
            failed_requests.append((state, year))  # Log the failed request
            time.sleep(5)

        time.sleep(1)
    
    # Save data periodically after each year
    all_temp_data.to_csv('temperature_data_partial.csv', index=False)
    print(f"Data saved after processing year {year}")

# Save the complete data after the main process
all_temp_data.to_csv('temperature_data_complete.csv', index=False)
print("Final data saved successfully!")

# Retry the failed requests
if failed_requests:
    print(f"Retrying {len(failed_requests)} failed requests...")

    for state, year in failed_requests:
        bdate = f'{year}0101'
        edate = f'{year}1231'
        params = {
            'email': email,
            'key': api_key,
            'param': '62101',
            'bdate': bdate,
            'edate': edate,
            'state': state
        }

        try:
            response = requests.get(url, params=params)
            response.raise_for_status()
            data = response.json()

            if 'Data' in data:
                temp_data = pd.DataFrame(data['Data'])
                all_temp_data = pd.concat([all_temp_data, temp_data], ignore_index=True)
                print(f"Successfully retrieved data for state {state} in year {year} on retry")
            else:
                print(f"No data for state {state} in year {year} on retry")

        except requests.exceptions.RequestException as e:
            print(f"Retry failed for state {state} in year {year}: {e}")
            time.sleep(5)

        time.sleep(1)

# Final save after retrying
all_temp_data.to_csv('temperature_data_complete_with_retries.csv', index=False)
print("Final data saved after retrying failed requests.")
